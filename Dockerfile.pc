#
# Image From https://github.com/stereolabs/zed-docker
#
FROM stereolabs/zed:3.5-gl-devel-cuda11.0-ubuntu20.04
ARG DEBIAN_FRONTEND=noninteractive

WORKDIR /root/ros2_installation

# Update Packages
RUN apt-get update
RUN apt-get install -y apt-utils
RUN apt-get install locales && locale-gen en_US en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 && export LANG=en_US.UTF-8

# Install ROS Package Keys
RUN apt-get install -y curl gnupg2 apt-transport-https gnupg ca-certificates lsb-release
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key  -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null

# Update package repo for ROS
RUN apt-get update

# Install ROS
RUN apt-get install -y ros-foxy-ros-base ros-foxy-demo-nodes-cpp
RUN apt-get install -y python3-argcomplete wget unzip nano build-essential python3-colcon-common-extensions git python3-rosdep libopencv-dev

# Configure Enviroment for ROS
RUN echo "source /opt/ros/foxy/setup.bash" >> ~/.bashrc

ENV ROS_DISTRO=foxy

SHELL ["/bin/bash", "-c"] 
WORKDIR /root/ros2_ws/src/
RUN git clone https://github.com/stereolabs/zed-ros2-wrapper.git 
WORKDIR /root/ros2_ws
RUN source /opt/ros/foxy/setup.bash && rosdep init && rosdep update && \
    rosdep install --from-paths src --ignore-src -r -y && \
    colcon build --symlink-install --cmake-args=-DCMAKE_BUILD_TYPE=Release --cmake-args=-DCMAKE_LIBRARY_PATH=/usr/local/cuda/lib64/stubs --cmake-args=-DCMAKE_CXX_FLAGS="-Wl,--allow-shlib-undefined" && \
    echo source $(pwd)/install/local_setup.bash >> ~/.bashrc && \
    source ~/.bashrc

WORKDIR /root/ros2_ws/src/
RUN git clone https://github.com/stereolabs/zed-ros2-examples.git
WORKDIR /root/ros2_ws
RUN source /opt/ros/foxy/setup.bash && \
    rosdep install --from-paths src --ignore-src -r -y && \
    colcon build --symlink-install --cmake-args=-DCMAKE_BUILD_TYPE=Release --cmake-args=-DCMAKE_LIBRARY_PATH=/usr/local/cuda/lib64/stubs --cmake-args=-DCMAKE_CXX_FLAGS="-Wl,--allow-shlib-undefined" && \
    source ~/.bashrc